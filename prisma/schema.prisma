generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String      @id @default(cuid())
  name       String
  password   String
  role       UserRole
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime?   @updatedAt @map("updated_at")
  email      String      @unique
  archivedAt DateTime?   @map("archived_at")
  customers  Customers[]
  medias     Medias[]
  tasks      Tasks[]
  comments   Comments[]

  @@map("users")
}

model Customers {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  whatsappLink String?   @map("whatsapp_link")
  contractLink String?   @map("contract_link")
  galleryLink  String?   @map("gallery_link")
  scheduleLink String?   @map("schedule_link")
  presentation String?   @map("presentation")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  archivedAt   DateTime? @map("archived_at")
  userId       String    @map("user_id")
  updatedBy    Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks        Tasks[]

  @@map("customers")
}

model Tasks {
  id          String          @id @default(cuid())
  title       String
  description String?
  due         DateTime
  responsible TaskResponsible
  completedAt DateTime?       @map("completed_at")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")
  archivedAt  DateTime?       @map("archived_at")
  customerId  String          @map("customer_id")
  userId      String          @map("user_id")
  medias      Medias[]
  customer    Customers       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  updatedBy   Users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comments[]

  @@map("tasks")
}

model Medias {
  id         String    @id @default(cuid())
  type       String
  path       String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  userId     String    @map("user_id")
  order      Int
  taskId     String    @map("task_id")
  task       Tasks     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy Users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medias")
}

model Comments {
  id        String     @id @default(cuid())
  author    String?
  text      String
  isLiked   Boolean?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  userId    String?    @map("user_id")
  taskId    String     @map("task_id")
  task      Tasks      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy Users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?    @map("parent_id")
  parent    Comments?  @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comments[] @relation("CommentToReplies")

  @@map("comments")
}

enum UserRole {
  ADMIN
  EDITOR
}

enum TaskResponsible {
  CUSTOMER
  AGENCY
}
